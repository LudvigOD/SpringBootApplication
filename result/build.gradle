
/**
 * Build file for the result application.
 */

plugins {
    id 'java'

    // I discovered these plugin, which makes the build process a lot easier!
    // Now, it just works out of the box, without any configuration. (\(^_^)/)
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.4'

}

// define variable with main class, used further down
ext {
    javaMainClass = "result.ResultApplication"
}

// Specify where to look for dependencies
repositories {
    mavenCentral()
}

// Declare that the task testCompile requires the JUnit framework
dependencies {
    implementation project(':shared')

    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-commons
    testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.10.1'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.1'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.1'
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
    testRuntimeOnly  group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.10.1'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.1.2'

}

test {
    useJUnitPlatform()

    // Enables detailed test logging
    // Note: We might want to exclude standardOut and standardError if our tests are too chatty
    testLogging {
        // Set options for log events
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'

        // Show detailed exceptions or not ('short' or 'full')
        exceptionFormat 'full'

        // Show standard out and error streams
        showStandardStreams true
    }
}

